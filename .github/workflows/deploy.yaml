on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '16.x'
  NODE_APP: 'proto1-frontend'                # set this to the node version to use

permissions:
  contents: write

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Set env variable
      run: echo "ARTIFACT_NAME=${{ env.NODE_APP }}-dist-${{ github.sha }}.tar.gz" >> $GITHUB_ENV

    - name: npm install, build, and test
      run: |
        npm install
        npm run build
        npm run test --if-present

    - name: Create deployment artifacts
      env:
        GITHUB_SHA: ${{ github.sha }}
      #run: tar -czf "${GITHUB_SHA}"-dist.tar.gz ./dist/
      run: tar -czf ${{ env.ARTIFACT_NAME }} ./dist/


    - name: Store artifact for distribution
      uses: actions/upload-artifact@v3
      with:
        name: app-build
        path: ${{ env.ARTIFACT_NAME }}

  Release:
    name: "Prepare release"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set env variable
        run: echo "ARTIFACT_NAME=${{ env.NODE_APP }}-dist-${{ github.sha }}.tar.gz" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Upload Artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ${{ env.ARTIFACT_NAME }}
          target: ${{ secrets.SERVER_PATH }}

      - name: Extract Artifact
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.SERVER_PATH }}
            mkdir -p template
            cd template
            rm -irf !'(*.tar.gz)'           
            mv ../${{ env.ARTIFACT_NAME }} .
            echo "Before extracting artifact"
            tar -xzvf ${{ env.ARTIFACT_NAME }} --strip-components 2
            rm *.tar.gz
            echo "Before restarting Apache server"
            sudo systemctl restart apache2
            echo "Deployed and Restarted Apache"



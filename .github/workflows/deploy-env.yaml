name: Proto1-Frontend

on:
  push:
    branches: [ main,dev ]
  # pull_request:
  #   branches: [ main,dev ]
  workflow_dispatch:

env:
  NODE_VERSION: '16.x'
  NODE_APP: 'proto1-frontend'                

permissions:
  contents: write

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Set env variable
      run: echo "ARTIFACT_NAME=${{ env.NODE_APP }}-dist-${{ github.sha }}.tar.gz" >> $GITHUB_ENV

    - name: npm install, build, and test
      run: |
        npm install
        npm run build
        npm run test --if-present

    - name: Create deployment artifacts
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: tar -czf ${{ env.ARTIFACT_NAME }} ./dist/

    - name: Store artifact for distribution
      uses: actions/upload-artifact@v3
      with:
        name: app-build
        path: ${{ env.ARTIFACT_NAME }}


  DeployDev:
    name: Deploy to Dev 
#   if: github.event_name == 'pull_request'
    if: github.event.ref == 'refs/heads/dev'
    needs: [Build]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      #url: 'http://dev.myapp.com'
    steps:
    

    - name: Set env variable
      run: echo "ARTIFACT_NAME=${{ env.NODE_APP }}-dist-${{ github.sha }}.tar.gz" >> $GITHUB_ENV

    - uses: actions/download-artifact@v3
      with:
        name: app-build

    - uses: actions/checkout@v3
    - name: Upload Script
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEV_SSH_HOST }}
        username: ${{ secrets.DEV_SSH_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SSH_PORT }}
        source: $GITHUB_WORKSPACE/scripts/install-apache.sh
        target: ${{ secrets.DEV_SERVER_PATH }}

    - name: Execute script
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_SSH_HOST }}
        username: ${{ secrets.DEV_SSH_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SSH_PORT }}
        script: |
          cd ${{ secrets.DEV_SERVER_PATH }}
          bash ${{ secrets.DEV_SERVER_PATH }}/scripts/install-apache.sh

    - name: Upload Artifact
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEV_SSH_HOST }}
        username: ${{ secrets.DEV_SSH_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SSH_PORT }}
        source: ${{ env.ARTIFACT_NAME }}
        target: ${{ secrets.DEV_SERVER_PATH }}

    - name: Extract Artifact
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_SSH_HOST }}
        username: ${{ secrets.DEV_SSH_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SSH_PORT }}
        script: |
          cd ${{ secrets.DEV_SERVER_PATH }}
          rm -irf *.html                          
          mkdir -p templates
          cd templates
          rm -irf !'(*.tar.gz)'           
          mv ../${{ env.ARTIFACT_NAME }} .
          echo ".....Before extracting Dev artifact......"
          tar -xzvf ${{ env.ARTIFACT_NAME }} --strip-components 2
          echo ".....Before restarting Dev Apache in : "
          echo "${{ secrets.DEV_SSH_HOST }}" | sed 's/./& /g'
          sudo systemctl restart apache2
          echo ".....Deployed and Restarted Dev Apache....."
              
  DeployProd:
    name: Deploy to Production 
#   needs: [DeployDev]
    if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: 
      name: production
      #url: 'http://www.myapp.com'
    steps:
    - name: Set env variable
      run: echo "ARTIFACT_NAME=${{ env.NODE_APP }}-dist-${{ github.sha }}.tar.gz" >> $GITHUB_ENV

    - uses: actions/download-artifact@v3
      with:
        name: app-build

    - name: Upload Script
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PROD_SSH_HOST }}
        username: ${{ secrets.PROD_SSH_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_SSH_PORT }}
        source: $GITHUB_WORKSPACE/scripts/install-apache.sh
        target: ${{ secrets.PROD_SERVER_PATH }}

    - name: Execute script
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_SSH_HOST }}
        username: ${{ secrets.PROD_SSH_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_SSH_PORT }}
        script: |
          cd ${{ secrets.PROD_SERVER_PATH }}
          bash ${{ secrets.DEV_SERVER_PATH }}/scripts/install-apache.sh

    - name: Upload Artifact
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PROD_SSH_HOST }}
        username: ${{ secrets.PROD_SSH_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_SSH_PORT }}
        source: ${{ env.ARTIFACT_NAME }}
        target: ${{ secrets.PROD_SERVER_PATH }}

    - name: Extract Artifact
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_SSH_HOST }}
        username: ${{ secrets.PROD_SSH_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_SSH_PORT }}
        script: |
          cd ${{ secrets.PROD_SERVER_PATH }}
          rm -irf *.html            
          mkdir -p templates
          cd templates
          rm -irf !'(*.tar.gz)'           
          mv ../${{ env.ARTIFACT_NAME }} .
          echo ".....Before extracting artifact....."
          tar -xzvf ${{ env.ARTIFACT_NAME }} --strip-components 2
          rm *.tar.gz
          echo ".....Before restarting Apache server....."
          sudo systemctl restart apache2
          echo ".....Deployed and Restarted Apache....."

  # DeployStaging:
  #   name: Deploy to Staging 
  #   if: github.event.ref == 'refs/heads/main'
  #   needs: [Build]
  #   runs-on: ubuntu-latest
  #   environment: 
  #     name: Staging
  #     # url: 'http://test.myapp.com'
  #   steps:
  #     - name: Deploy
  #       run: echo I am deploying! 
    
